#include <unordered_map>
#include <iostream>
#include <unordered_set>
#include <sstream>
#include <assert.h>
#include "AxiomChecker.h"

constexpr const unsigned long long P_left = 29, P_right = 31;

static std::vector<pNode> hyp_ast;

bool is_white(char c) {
    return c == ' ' || c == '\t' || c == '\r';
}

void skip_spaces(const std::string &expression, size_t &pointer) {
    while (pointer < expression.length() && is_white(expression[pointer])) {
        ++pointer;
    }
}

void print(const pNode &node) {
    if (node->isLeaf()) {
        std::cout << node->value;
        return;
    }
    if (node->value != "!") {
        std::cout << "(";
        print(node->left);
        std::cout << " " << node->value << " ";
        print(node->right);
        std::cout << ")";
    } else {
        std::cout << "!";
        print(node->left);
    }
}

enum token {
    BEGIN, OPEN, CLOSE, VAR, OR, AND, IMPL, NOT, END
};

enum came_from : int {
    HYPOTHESIS,
    AXIOM,
    MP,
    WRONG
};

struct expression_wrapper {
    void set_data(enum came_from its, int num_old, int ax_hyp_num) {
        is = its;
        number_in_old_proof = num_old;
        axiom_or_hypothesis_number  = ax_hyp_num;
    }

    bool isProved = false;
    bool isUsed = false;
    enum came_from is = WRONG;
    int number_in_old_proof = -1;
    int axiom_or_hypothesis_number = -1;
    int prefix = -1;
    int suffix = -1;
    unsigned long long hash = 0;
    bool operator==(const expression_wrapper &other) const {
        return hash == other.hash;
    }
};

class AST {
public :
    pNode root = nullptr;
    void parse() {
        root = impl();
        fillTree(root);
    }

    void setExpression(const std::string &expression) {
        this->expression = expression;
        init();
    }

private :
    void init() {
        cur_token = BEGIN;
        pointer = 0;
    }

    bool partOfName(char c) {
        return ('A' <= c && c <= 'Z') || ('0' <= c && c <= '9') || c == '\'';
    }

    // returns length of variable name and move pointer to the index of last letter in variable name
    size_t get_variable_name_len() {
        size_t start = 0;
        while (pointer < expression.length() && partOfName(expression[pointer])) {
            ++pointer;
            ++start;
        }
        return start;
    }

    //set spans of tree for each node and counts hash
    void fillTree(const pNode &node) {
        if (node == nullptr || (node->left == nullptr && node->right == nullptr))
            return;

        fillTree(node->left);
        fillTree(node->right);

        if (node->right == nullptr) {
            node->set_hash(node->getLeftChildHash() * P_left + '!');
        } else {
            node->set_hash(node->getLeftChildHash() * P_left + node->getRightChildHash() * P_right + node->value[0]);
            assert(node->value[0] == '-'
                   || node->value[0] == '&'
                   || node->value[0] == '|');
        }
    }

    void get_token() {
        skip_spaces(expression, pointer);
        if (pointer >= expression.length()) {
            cur_token = END;
            return;
        }

        char cur_symbol = expression[pointer];

        switch (cur_symbol) {
            case '-' : {
                ++pointer;
                cur_token = IMPL;
                break;
            }
            case '&' : {
                cur_token = AND;
                break;
            }
            case '|' : {
                cur_token = OR;
                break;
            }
            case '!' : {
                cur_token = NOT;
                break;
            }
            case '(' : {
                cur_token = OPEN;
                break;
            }
            case ')' : {
                cur_token = CLOSE;
                break;
            }
            default: {
                cur_token = VAR;
                size_t start = pointer;
                cur_var_name = expression.substr(start, get_variable_name_len());
                --pointer;
                break;
            }
        }
        ++pointer;
    }

    pNode ver() {
        get_token();
        pNode result;
        switch (cur_token) {
            case VAR : {
                result.reset(new Node(cur_var_name));
                result->set_hash(std::hash<std::string>()(cur_var_name));
                get_token();
                break;
            }
            case NOT : {
                pNode tmp(new Node("!", ver(), nullptr));
                result = std::move(tmp);
                break;
            }
            case OPEN : {
                result = impl();
                get_token();
                break;
            }
        }
        return result;
    }

    pNode conj() {
        pNode result = ver();
        while (true) {
            switch (cur_token) {
                case AND: {
                    pNode tmp(new Node("&", std::move(result), ver()));
                    result = std::move(tmp);
                    break;
                }
                default:
                    return result;
            }
        }
    }

    pNode disj() {
        pNode result = conj();
        while (true) {
            switch (cur_token) {
                case OR : {
                    pNode tmp(new Node("|", std::move(result), conj()));
                    result = std::move(tmp);
                    break;
                }
                default:
                    return result;
            }
        }
    }

    pNode impl() {
        pNode result = disj();
        while (true) {
            switch (cur_token) {
                case IMPL : {
                    pNode tmp(new Node("->", std::move(result), impl()));
                    result = std::move(tmp);
                    break;
                }
                default:
                    return result;
            }
        }
    }

    token cur_token = BEGIN;
    size_t pointer = 0;
    std::string cur_var_name;
    std::string expression;
};

class Intuit {
public:
    Intuit() {
        AST parser;
        for (size_t i = 0; i < negation.size(); ++i) {
            parser.setExpression(negation[i]);
            parser.parse();
            negationAST.push_back(std::move(parser.root));
        }
        for (size_t i = 0; i < mp.size(); ++i) {
            parser.setExpression(mp[i]);
            parser.parse();
            mpAST.push_back(std::move(parser.root));
        }
        for (size_t i = 0; i < tenthAxiom.size(); ++i) {
            parser.setExpression(tenthAxiom[i]);
            parser.parse();
            tenthAxiomAST.push_back(std::move(parser.root));
        }
    }

    void print_NEG(const pNode &node) {
        for(size_t i = 0; i < negationAST.size(); ++i) {
            print_proof(negationAST[i], node);
            std::cout << "\n";
        }
    }

    void print_AXIOM(const pNode &node) {
        for (size_t i = 0; i < tenthAxiomAST.size(); ++i) {
            print_proof(tenthAxiomAST[i], node);
            std::cout << "\n";
        }
    }

    void print_MP(const pNode &A, const pNode &B) {
        for (size_t i = 0; i < mpAST.size(); ++i) {
            print_proof(mpAST[i], A, B);
            std::cout << "\n";
        }
    }

private:
    void print_proof(const pNode &node, const pNode &leaf) {
        if (node->isLeaf()) {
            print(leaf);
            return;
        }
        if (node->value != "!") {
            std::cout << "(";
            print_proof(node->left, leaf);
            std::cout << " " << node->value << " ";
            print_proof(node->right, leaf);
            std::cout << ")";
        } else {
            std::cout << "!";
            print_proof(node->left, leaf);
        }
    }

    void print_proof(const pNode &node, const pNode &A, const pNode &B) {
        if (node->isLeaf()) {
            if (node->value == "A") {
                print(A);
            } else {
                print(B);
            }
            return;
        }
        if (node->value != "!") {
            std::cout << "(";
            print_proof(node->left, A, B);
            std::cout << " " << node->value << " ";
            print_proof(node->right, A, B);
            std::cout << ")";
        } else {
            std::cout << "!";
            print_proof(node->left, A, B);
        }
    }

    const std::vector<std::string> negation = {
                                            "A",
                                            "(A -> (!A -> A))",
                                            "(!A -> A)",
                                            "(!A -> (!A -> !A))",
                                            "((!A -> (!A -> !A)) -> ((!A -> ((!A -> !A) -> !A)) -> (!A -> !A)))",
                                            "((!A -> ((!A -> !A) -> !A)) -> (!A -> !A))",
                                            "(!A -> ((!A -> !A) -> !A))",
                                            "(!A -> !A)",
                                            "((!A -> A) -> ((!A -> !A) -> !!A))",
                                            "((!A -> !A) -> !!A)",
                                            "!!A"};
    const std::vector<std::string> mp = {
        "(A -> ((A -> B) -> A))",
        "((A -> ((A -> B) -> A)) -> (!B -> (A -> ((A -> B) -> A))))",
        "(!B -> (A -> ((A -> B) -> A)))",
        "((A -> B) -> ((A -> B) -> (A -> B)))",
        "(((A -> B) -> ((A -> B) -> (A -> B))) -> (!B -> ((A -> B) -> ((A -> B) -> (A -> B)))))",
        "(!B -> ((A -> B) -> ((A -> B) -> (A -> B))))",
        "(((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))",
        "((((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B))))) -> (!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))))",
        "(!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B))))))",
        "((!B -> ((A -> B) -> ((A -> B) -> (A -> B)))) -> ((!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))) -> (!B -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))))",
        "((!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))) -> (!B -> (A -> ((A -> B) -> ((A -> B) -> (A -> B))))))",
        "(!B -> (A -> ((A -> B) -> ((A -> B) -> (A -> B)))))",
        "(((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))",
        "((((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",
        "(!B -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))",
        "((((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",

        "(!B -> ((((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))))",

        "((!B -> ((((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))) -> (!B -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))))",
        "(!B -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",
        "((A -> ((A -> B) -> ((A -> B) -> (A -> B)))) -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",

        "(!B -> ((A -> ((A -> B) -> ((A -> B) -> (A -> B)))) -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))))",
        "((!B -> (A -> ((A -> B) -> ((A -> B) -> (A -> B))))) -> ((!B -> ((A -> ((A -> B) -> ((A -> B) -> (A -> B)))) -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))) -> (!B -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))))",

        "(!B -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",
        "((!B -> (A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))) -> ((!B -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))) -> (!B -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))))",
        "((!B -> ((A -> (((A -> B) -> ((A -> B) -> (A -> B))) -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))) -> (!B -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))))",
        "(!B -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))))",
        "((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))",
        "(((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (!B -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))",
        "(!B -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))))",
        "(((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))",
        "((((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))))) -> (!B -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))))",
        "(!B -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))))))",
        "((!B -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((!B -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))) -> (!B -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))))",
        "((!B -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))) -> (!B -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))))))",
        "(!B -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))))",
        "((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))",
        "(((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B))))) -> (!B -> ((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))))",
        "(!B -> ((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B))))))",
        "((!B -> (A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))))) -> ((!B -> ((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))) -> (!B -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))))",
        "((!B -> ((A -> ((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B)))) -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))) -> (!B -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B))))))",
        "(!B -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B)))))",
        "((!B -> (A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B))))) -> ((!B -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B))))) -> (!B -> (A -> ((A -> B) -> (A -> B))))))",
        "((!B -> ((A -> (((A -> B) -> (((A -> B) -> (A -> B)) -> (A -> B))) -> ((A -> B) -> (A -> B)))) -> (A -> ((A -> B) -> (A -> B))))) -> (!B -> (A -> ((A -> B) -> (A -> B)))))",
        "(!B -> (A -> ((A -> B) -> (A -> B))))",
        "(((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))",
        "((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (!B -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "(!B -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))",
        "((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "(((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))) -> (!B -> ((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))))",
        "(!B -> ((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))))",
        "((!B -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> ((!B -> ((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))) -> (!B -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))))",
        "((!B -> ((((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))) -> (!B -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))))",
        "(!B -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "(((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))) -> (!B -> ((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))))",
        "(!B -> ((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))))",
        "((!B -> (A -> ((A -> B) -> A))) -> ((!B -> ((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))) -> (!B -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))))",
        "((!B -> ((A -> ((A -> B) -> A)) -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))) -> (!B -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))))",
        "(!B -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "((!B -> (A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))) -> ((!B -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))) -> (!B -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))))",
        "((!B -> ((A -> (((A -> B) -> A) -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))) -> (!B -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))))",
        "(!B -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))))",
        "((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))",
        "(((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B)))) -> (!B -> ((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))))",
        "(!B -> ((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B)))))",
        "((!B -> (A -> ((A -> B) -> (A -> B)))) -> ((!B -> ((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))) -> (!B -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))))",
        "((!B -> ((A -> ((A -> B) -> (A -> B))) -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))) -> (!B -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B)))))",
        "(!B -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B))))",
        "((!B -> (A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B)))) -> ((!B -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B)))) -> (!B -> (A -> ((A -> B) -> B)))))",
        "((!B -> ((A -> (((A -> B) -> (A -> B)) -> ((A -> B) -> B))) -> (A -> ((A -> B) -> B)))) -> (!B -> (A -> ((A -> B) -> B))))",
        "(!B -> (A -> ((A -> B) -> B)))",
        "(((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))",
        "((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (!B -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))",
        "(!B -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))))",
        "((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))",
        "(((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))))) -> (!B -> ((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))))",
        "(!B -> ((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))))))",
        "((!B -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> ((!B -> ((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))) -> (!B -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))))",
        "((!B -> ((((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))) -> (!B -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))))))",
        "(!B -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))))",
        "(!B -> ((A -> B) -> !B))",
        "((!B -> ((A -> B) -> !B)) -> (!B -> (!B -> ((A -> B) -> !B))))",
        "(!B -> (!B -> ((A -> B) -> !B)))",
        "((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B))))",
        "(((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B)))) -> (!B -> ((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B))))))",
        "(!B -> ((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B)))))",
        "((!B -> (!B -> ((A -> B) -> !B))) -> ((!B -> ((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B))))) -> (!B -> (A -> (!B -> ((A -> B) -> !B))))))",
        "((!B -> ((!B -> ((A -> B) -> !B)) -> (A -> (!B -> ((A -> B) -> !B))))) -> (!B -> (A -> (!B -> ((A -> B) -> !B)))))",
        "(!B -> (A -> (!B -> ((A -> B) -> !B))))",
        "(!B -> (A -> !B))",
        "((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))",
        "(((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B)))) -> (!B -> ((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))))",
        "(!B -> ((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B)))))",
        "((!B -> (A -> !B)) -> ((!B -> ((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))) -> (!B -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))))",
        "((!B -> ((A -> !B) -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))) -> (!B -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B)))))",
        "(!B -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B))))",
        "((!B -> (A -> (!B -> ((A -> B) -> !B)))) -> ((!B -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B)))) -> (!B -> (A -> ((A -> B) -> !B)))))",
        "((!B -> ((A -> (!B -> ((A -> B) -> !B))) -> (A -> ((A -> B) -> !B)))) -> (!B -> (A -> ((A -> B) -> !B))))",
        "(!B -> (A -> ((A -> B) -> !B)))",
        "((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))",
        "(((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B))))) -> (!B -> ((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))))",
        "(!B -> ((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B))))))",
        "((!B -> (A -> ((A -> B) -> B))) -> ((!B -> ((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))) -> (!B -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))))",
        "((!B -> ((A -> ((A -> B) -> B)) -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))) -> (!B -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B))))))",
        "(!B -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B)))))",
        "((!B -> (A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B))))) -> ((!B -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B))))) -> (!B -> (A -> (((A -> B) -> !B) -> !(A -> B))))))",
        "((!B -> ((A -> (((A -> B) -> B) -> (((A -> B) -> !B) -> !(A -> B)))) -> (A -> (((A -> B) -> !B) -> !(A -> B))))) -> (!B -> (A -> (((A -> B) -> !B) -> !(A -> B)))))",
        "(!B -> (A -> (((A -> B) -> !B) -> !(A -> B))))",
        "((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))",
        "(((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B)))) -> (!B -> ((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))))",
        "(!B -> ((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B)))))",
        "((!B -> (A -> ((A -> B) -> !B))) -> ((!B -> ((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))) -> (!B -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))))",
        "((!B -> ((A -> ((A -> B) -> !B)) -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))) -> (!B -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B)))))",
        "(!B -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B))))",
        "((!B -> (A -> (((A -> B) -> !B) -> !(A -> B)))) -> ((!B -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B)))) -> (!B -> (A -> !(A -> B)))))",
        "((!B -> ((A -> (((A -> B) -> !B) -> !(A -> B))) -> (A -> !(A -> B)))) -> (!B -> (A -> !(A -> B))))",
        "(!B -> (A -> !(A -> B)))",
        "((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A))",
        "(((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A)) -> (!B -> ((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A))))",
        "(!B -> ((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A)))",
        "(!!(A -> B) -> (A -> !!(A -> B)))",
        "((!!(A -> B) -> (A -> !!(A -> B))) -> (!B -> (!!(A -> B) -> (A -> !!(A -> B)))))",
        "(!B -> (!!(A -> B) -> (A -> !!(A -> B))))",
        "(!!(A -> B) -> (!B -> !!(A -> B)))",
        "(!B -> !!(A -> B))",
        "((!B -> !!(A -> B)) -> ((!B -> (!!(A -> B) -> (A -> !!(A -> B)))) -> (!B -> (A -> !!(A -> B)))))",
        "((!B -> (!!(A -> B) -> (A -> !!(A -> B)))) -> (!B -> (A -> !!(A -> B))))",
        "(!B -> (A -> !!(A -> B)))",
        "((!B -> (A -> !(A -> B))) -> ((!B -> ((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A))) -> (!B -> ((A -> !!(A -> B)) -> !A))))",
        "((!B -> ((A -> !(A -> B)) -> ((A -> !!(A -> B)) -> !A))) -> (!B -> ((A -> !!(A -> B)) -> !A)))",
        "(!B -> ((A -> !!(A -> B)) -> !A))",
        "((!B -> (A -> !!(A -> B))) -> ((!B -> ((A -> !!(A -> B)) -> !A)) -> (!B -> !A)))",
        "((!B -> ((A -> !!(A -> B)) -> !A)) -> (!B -> !A))",
        "(!B -> !A)",
        "((!B -> !A) -> ((!B -> !!A) -> !!B))",
        "(!!A -> (!B -> !!A))",
        "(!B -> !!A)",
        "((!B -> !!A) -> !!B)",
        "!!B"
    };
    const std::vector<std::string> tenthAxiom = {
        "(A -> (!!A -> A))",
        "((A -> (!!A -> A)) -> (!(!!A -> A) -> (A -> (!!A -> A))))",
        "((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))",
        "(((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> ((A -> (!!A -> A)) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))",
        "((A -> (!!A -> A)) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)))",
        "(((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))",
        "((((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)))) -> ((A -> (!!A -> A)) -> (((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))))",
        "((A -> (!!A -> A)) -> (((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)))))",
        "(((A -> (!!A -> A)) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (((A -> (!!A -> A)) -> (((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))))",
        "(((A -> (!!A -> A)) -> (((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)))))",
        "((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))))",
        "((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))",
        "(((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))))",
        "((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))))",
        "(((A -> (!!A -> A)) -> (!(!!A -> A) -> (A -> (!!A -> A)))) -> (((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))))",
        "(((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> (!!A -> A))) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))))",
        "((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))",
        "(((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A)))) -> (((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))))",
        "(((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> (!!A -> A)) -> ((A -> !(!!A -> A)) -> !A))) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))))",
        "((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)))",
        "(!(!!A -> A) -> (A -> !(!!A -> A)))",
        "((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> (A -> !(!!A -> A)))))",
        "((A -> (!!A -> A)) -> (!(!!A -> A) -> (A -> !(!!A -> A))))",
        "((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))",
        "(((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))))",
        "((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A))))",
        "(((A -> (!!A -> A)) -> (!(!!A -> A) -> (A -> !(!!A -> A)))) -> (((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))))",
        "(((A -> (!!A -> A)) -> ((!(!!A -> A) -> (A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))) -> ((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A))))",
        "((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A)))",
        "(((A -> (!!A -> A)) -> (!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A))) -> (((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> !A))))",
        "(((A -> (!!A -> A)) -> ((!(!!A -> A) -> ((A -> !(!!A -> A)) -> !A)) -> (!(!!A -> A) -> !A))) -> ((A -> (!!A -> A)) -> (!(!!A -> A) -> !A)))",
        "((A -> (!!A -> A)) -> (!(!!A -> A) -> !A))",
        "(!(!!A -> A) -> !A)",
        "(!A -> (!!A -> A))",
        "((!A -> (!!A -> A)) -> (!(!!A -> A) -> (!A -> (!!A -> A))))",
        "((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))",
        "(((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> ((!A -> (!!A -> A)) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "((!A -> (!!A -> A)) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)))",
        "(((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "((((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)))) -> ((!A -> (!!A -> A)) -> (((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))))",
        "((!A -> (!!A -> A)) -> (((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)))))",
        "(((!A -> (!!A -> A)) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (((!A -> (!!A -> A)) -> (((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))))",
        "(((!A -> (!!A -> A)) -> (((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)))))",
        "((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "(((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))))",
        "((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))))",
        "(((!A -> (!!A -> A)) -> (!(!!A -> A) -> (!A -> (!!A -> A)))) -> (((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))))",
        "(((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> (!!A -> A))) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))))",
        "((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "(((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A)))) -> (((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))))",
        "(((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> (!!A -> A)) -> ((!A -> !(!!A -> A)) -> !!A))) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))))",
        "((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)))",
        "(!(!!A -> A) -> (!A -> !(!!A -> A)))",
        "((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> (!A -> !(!!A -> A)))))",
        "((!A -> (!!A -> A)) -> (!(!!A -> A) -> (!A -> !(!!A -> A))))",
        "((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))",
        "(((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))))",
        "((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A))))",
        "(((!A -> (!!A -> A)) -> (!(!!A -> A) -> (!A -> !(!!A -> A)))) -> (((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))))",
        "(((!A -> (!!A -> A)) -> ((!(!!A -> A) -> (!A -> !(!!A -> A))) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))) -> ((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A))))",
        "((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A)))",
        "(((!A -> (!!A -> A)) -> (!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A))) -> (((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> !!A))))",
        "(((!A -> (!!A -> A)) -> ((!(!!A -> A) -> ((!A -> !(!!A -> A)) -> !!A)) -> (!(!!A -> A) -> !!A))) -> ((!A -> (!!A -> A)) -> (!(!!A -> A) -> !!A)))",
        "((!A -> (!!A -> A)) -> (!(!!A -> A) -> !!A))",
        "(!(!!A -> A) -> !!A)",
        "((!(!!A -> A) -> !A) -> ((!(!!A -> A) -> !!A) -> !!(!!A -> A)))",
        "((!(!!A -> A) -> !!A) -> !!(!!A -> A))",
        "!!(!!A -> A)"
    };
    std::vector<pNode> negationAST, mpAST, tenthAxiomAST;
};

class Wizard {
public:
    bool isCorrect = true;
    Wizard() {
        parseAxioms();
        set_data();
    }

    void transform() {
        size_t cnt = 0;
        for (auto &h: hyp_ast) {
            print(h);
            if (cnt++ < hyp_ast.size() - 1)
                std::cout << ", ";
        }
        std::cout << " |- ";
        std::cout << "!!";
        print(proposal);
        std::cout << "\n";
        run();
    }
private:
    Intuit intuit;
    typedef std::unique_ptr<expression_wrapper> pWrapper;
    AST builder;
    AxiomChecker checker;

    void parseAxioms() {
        for (size_t i = 0; i < AxiomChecker::N_AXIOM; ++i) {
            builder.setExpression(checker.get_kth_axiom(i));
            builder.parse();
            checker.set_kth_axiom_tree(i, builder.root);
        }
    }

    void set_data() {
        std::string tmp;
        getline(std::cin, tmp);

        size_t beg = 0;
        size_t hypothesis_number = 0;

        size_t index = 0;
        skip_spaces(tmp, index);

        if (tmp[index] != '|') {
            for (; index < tmp.size(); ++index) {
                if (tmp[index] == ',' || (tmp[index] == '|' && tmp[index + 1] == '-')) {
                    builder.setExpression(tmp.substr(beg, index - beg));
                    builder.parse();
                    hyp_ast.push_back(std::move(builder.root));
                    assert(hyp_ast.back() != nullptr);
                    check_hyp.insert({hyp_ast.back()->getHash(), {hyp_ast.back().get(), ++hypothesis_number}}) ;

                    if (tmp[index] == '|') {
                        index += 2;
                        builder.setExpression(tmp.substr(index));
                        builder.parse();
                        proposal = std::move(builder.root);
                        break;
                    }
                    ++index;
                    skip_spaces(tmp, index);
                    beg = index;
                }
            }
        } else {
            index += 2;
            builder.setExpression(tmp.substr(index));
            builder.parse();
            proposal = std::move(builder.root);
        }

        while (getline(std::cin, tmp)) {
            builder.setExpression(tmp);
            builder.parse();
            ast_old_proof.push_back(std::move(builder.root));
        }
    }

    void run() {
        for (size_t index = 0; index < ast_old_proof.size(); ++index) {
            unsigned long long hash = ast_old_proof[index]->getHash();

            pWrapper wrapper = std::make_unique<expression_wrapper>();

            wrapper->number_in_old_proof = index;
            wrapper->hash = hash;

            auto found_hypothesis = check_hyp.find(hash);

            if (found_hypothesis != check_hyp.end()) {
                fill_proved_wrapper(ast_old_proof[index], wrapper, index, HYPOTHESIS, (int) found_hypothesis->second.second, -1, -1);
                intuit.print_NEG(ast_old_proof[index]);
            } else {
                int axiom_number = checker.find_axiom(ast_old_proof[index]);
                if (axiom_number >= 0 && axiom_number <= 9) {
                    fill_proved_wrapper(ast_old_proof[index], wrapper, index, AXIOM, axiom_number, -1, -1);
                    intuit.print_NEG(ast_old_proof[index]);
                } else if (axiom_number == 10) {
                     fill_proved_wrapper(ast_old_proof[index], wrapper, index, AXIOM, axiom_number, -1, -1);
                     intuit.print_AXIOM(ast_old_proof[index]->right);
                } else {
                    //протеверяю  mp ли this
                    auto right_subtree = right_set.find(hash);

                    if (right_subtree != right_set.end()) {
                        unsigned long long hash_of_whole_tree = '-' + P_right * hash;
                        expression_wrapper *left = nullptr;
                        for (auto l: right_subtree->second) {
                            auto left_proved_tree = proved.find(l);
                            if (left_proved_tree != proved.end()) {
                                left = left_proved_tree->second;
                            }
                        }
                        if (left != nullptr) {
                            intuit.print_MP(ast_old_proof[left->number_in_old_proof], ast_old_proof[index]);

                            hash_of_whole_tree += (P_left * left->hash);
                            auto pair_wrp = proved.find(hash_of_whole_tree);

                            //If you count hash well 'pair_wrap' should exist

                            assert(pair_wrp != proved.end());
                            expression_wrapper *whole_expr = pair_wrp->second;
                            fill_proved_wrapper(ast_old_proof[index], wrapper, index, MP, -1,
                                                left->number_in_old_proof, whole_expr->number_in_old_proof);

                        }
                    } else {
                        isCorrect = false;
                    }
                }
            }
            wrappers.emplace_back(std::move(wrapper));
        }
    }

    void fill_proved_wrapper(const pNode &node, const pWrapper &wrapper, int index, enum came_from is, int axiom_number,
                             int prefix, int suffix) {
        wrapper->set_data(is, index, axiom_number);
        if (is == MP) {
            wrapper->prefix = prefix;
            wrapper->suffix = suffix;
        }
        wrapper->isProved = true;
        add_to_right_set(node);
        proved.insert({wrapper->hash, wrapper.get()});
    }

    //это proved_ast, которое имеет в корне '->' и следовательно правое поддерево, левое поддерево
    void add_to_right_set(const pNode &root) {
        if (root->value != "->")
            return;
        auto found_right_ast = right_set.find(root->right->getHash());
        if (found_right_ast != right_set.end()) {
            found_right_ast->second.insert(root->left->getHash());
        } else {
            right_set.insert(std::make_pair(root->right->getHash(),
                                            std::unordered_set<unsigned long long>() = {root->left->getHash()}));
        }
    }

    std::unordered_map<unsigned long long, std::unordered_set<unsigned long long>> right_set;
    std::unordered_map<unsigned long long, expression_wrapper *> proved;
    std::vector<pWrapper> wrappers;
    std::unordered_map<unsigned long long, std::pair<Node *, size_t >> check_hyp;
    pNode proposal;

    std::vector<pNode> ast_old_proof;
};

int main() {
    Wizard wizard;
    wizard.transform();
    return 0;
}
